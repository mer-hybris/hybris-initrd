#!/bin/sh

# Jolla btrfs root mounting script, adapted for ext4
#
# Copyright (C) 2014 Jolla Ltd.
# Copyright (c) 2021 Open Mobile Platform LLC.
# Contact: Kalle Jokiniemi <kalle.jokiniemi@jolla.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

# Pass the partition label name as $1

log()
{
	echo "root-mount: $1" > /dev/kmsg
}

if [ -z $1 ] || [ ! -e $1 ]; then
	log "Please pass mount point as parameter!"
	exit 1
fi

set -o allexport
. /etc/sysconfig/init
. /etc/sysconfig/partitions
. /etc/sysconfig/display
set +o allexport

PHYSDEV_SEARCHLIST="$PHYSDEV_PART_LABEL sailfishos"
FS_RESIZED=".fs-resized"
IS_FS_RESIZED=0

for label in $PHYSDEV_SEARCHLIST; do
	PHYSDEV=$(find-mmc-bypartlabel "$label")

	if test -n "$PHYSDEV"; then
		break
	fi
done

if test -z "$PHYSDEV"; then
	log "Failed to find sailfish OS partition!"
	exit 1
fi

ROOTDEV="/dev/sailfish/root"
HOMEDEV="/dev/sailfish/home"
MOUNT_POINT=$1

LVM_RESERVED_KB=$(expr $LVM_RESERVED_MB \* 1024)

# This function should not fail even if the operations cannot be performed
check_firstboot_resize()
{
	if test "$IS_FS_RESIZED" -eq 1; then
		# The space is allocated, nothing to do.
		return 0
	fi

	FREE_EXTENTS=$(lvm vgdisplay sailfish -c | cut -d ":" -f 16)
	EXTENT_SIZE=$(lvm vgdisplay sailfish -c | cut -d ":" -f 13)
	FREE_KB=$(expr $FREE_EXTENTS \* $EXTENT_SIZE)

	# lvextend returns error if a partition was resized already,
	# so protecting it with a condition.
	if test "$FREE_KB" -gt "$LVM_RESERVED_KB"; then
		# Increase root size
		if ! lvm lvextend --size "$LVM_ROOT_SIZE"M "$ROOTDEV"; then
			log "Extending root LVM partition failed."
		fi
	fi

	e2fsck -f -y "$ROOTDEV" > /dev/kmsg
	# resize2fs returns 0 on resized partition.
	resize2fs -f "$ROOTDEV" > /dev/kmsg

	# Check how much space we can add to home
	FREE_EXTENTS=$(lvm vgdisplay sailfish -c | cut -d ":" -f 16)

	# lvextend returns error if a partition was resized already.
	if test "$FREE_EXTENTS" -gt 0; then
		HOME_KB=$(expr $FREE_EXTENTS \* $EXTENT_SIZE)
		HOME_KB=$(expr $HOME_KB - $LVM_RESERVED_KB)

		# Increase home size by HOME_KB
		if ! lvm lvextend --size +"$HOME_KB"K $HOMEDEV; then
			log "Extending home LVM partition failed."
		fi
	fi

	e2fsck -f -y "$HOMEDEV" > /dev/kmsg
	resize2fs -f "$HOMEDEV" > /dev/kmsg
	return 0
}

# If mounted filesystem $1 has .clear-device file, reset factory image.
factory_reset_if_needed()
{
	if test -f $1/usr/share/lipstick/devicelock/.clear-device; then
		if test -f $1/usr/share/lipstick/devicelock/.clear-device-enable-reboot; then
			REBOOT=1
		fi
		if test -f $1/usr/share/lipstick/devicelock/.clear-device-full-wipe; then
			export SAILFISHOS_WIPE_PARTITIONS="1"
		fi
		if test -f $1/usr/share/lipstick/devicelock/.clear-device-external-media; then
			CLEAR_EXTERNAL_MEDIA=1
		fi

		# check if there is a custom factory reset animation
		ANIMATION_DIR='/res/images'
		if test -d $1/usr/share/custom-reset-animation/; then
			ANIMATION_DIR=$(mktemp -d)
			cp -rf $1/usr/share/custom-reset-animation/* $ANIMATION_DIR
		fi
		umount $1

		log "Mounting sysfs."
		mount /sys

		write()
		{
			echo -n "$2" > $1
		}

		# Minimize power consumption by lowering display brightness to minimum
		write $DISPLAY_BRIGHTNESS_PATH $DISPLAY_BRIGHTNESS

		yamui -a 1100 -t "Resetting to factory state, please do not power off!" \
			-i $ANIMATION_DIR \
			animation-recover-001 animation-recover-002 animation-recover-003 \
			animation-recover-004 animation-recover-005 animation-recover-006 \
			animation-recover-007 animation-recover-008 &

		YAMUIPID=$!

		if factory-reset-lvm $LVM_ROOT_SIZE $LVM_RESERVED_MB; then
			# Successful recovery.

			if test "$CLEAR_EXTERNAL_MEDIA" = "1" && ! factory-reset-external $EXTERNAL_MEDIA_DEVICES; then
				log "Requested clear of external storage but the command failed."
			fi

			kill "$YAMUIPID"
			# TODO: maybe replace this with a big-ass OK-sign png..
			yamui -t "Factory reset successful" &

			sleep 4

			if test "$REBOOT" = "1"; then
				reboot -f
			else
				poweroff -f
			fi
		else
			kill "$YAMUIPID"
			# TODO: maybe replace this with a big-ass OK-sign png...
			yamui -t "Factory reset failed" &
			sleep 4
			# We failed to reset, reboot to recovery mode
			log "Factory reset failed. Rebooting to recovery mode."
			reboot2 recovery
		fi
	fi
}

# Make sure all of the disk is assigned for use
lvm pvresize $PHYSDEV

# Activate LVs on sailfish volume group
if ! lvm vgchange -a y sailfish; then
	# TODO: Consider doing a factory reset here instead of aborting...
	#reset_factory_image
	log "No sailfish VG found, aborting system boot!"
	exit 1
fi

# Check factory reset need and read FS resize status.
if mount -t ext4 $ROOTDEV $1; then
	factory_reset_if_needed $1

	if test -f "$1/$FS_RESIZED"; then
		IS_FS_RESIZED=1
	fi

	umount $1
fi

# Check and resize root and home in case usage indicates first boot
check_firstboot_resize

if mount -t ext4 $ROOTDEV $1; then
	log "Root partition is mounted."
	# If we are here then filesystem is already resized.
	touch "$1/$FS_RESIZED"
	exit 0
fi

# We should not get here ever...
log "Can't continue system boot. Exiting."
exit 1
